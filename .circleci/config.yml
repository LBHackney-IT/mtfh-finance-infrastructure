version: 2.1

orbs:
  aws-cli: circleci/aws-cli@0.1.9
  aws_assume_role: lbh-hackit/aws_assume_role@0.1.0

executors:
  docker-python:
    docker:
      - image: circleci/python:3.7
  docker-terraform:
    docker:
      - image: "hashicorp/terraform:light"

references:
  workspace_root: &workspace_root "~"
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

commands:
  assume-role-and-persist-workspace:
    description: "Assumes deployment role and persists credentials across jobs"
    parameters:
      aws-account:
        type: string
    steps:
      - checkout
      - aws_assume_role/assume_role:
          account: <<parameters.aws-account>>
          profile_name: default
          role: "LBH_Circle_CI_Deployment_Role"
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .aws
  # Init then Plan is used for "Preview" - don't add any "apply" steps
  terraform-init-then-plan:
    description: "Initializes and applies terraform configuration"
    parameters:
      environment:
        type: string
    steps:
      - *attach_workspace
      - checkout
      - run:
          command: |
            cd ./<<parameters.environment>>/
            terraform get -update=true
            terraform init
          name: get and init
      - run:
      # PLEASE LEAVE THIS AS A PLAN, IF YOU WANT TO CHANGE IT THEN SPEAK TO HUMAIRAA FIRST. 
          name: plan
          command: |
            cd ./<<parameters.environment>>/
            terraform plan
  # Used for actual deployment of Terraform resources.
  terraform-init-then-apply:
    description: "Initializes and applies terraform configuration"
    parameters:
      environment:
        type: string
    steps:
      - *attach_workspace
      - checkout
      - run:
          command: |
            cd ./<<parameters.environment>>/
            terraform get -update=true
            terraform init
          name: get and init
      - run:
          name: apply
          command: |
            cd ./<<parameters.environment>>/
            terraform apply -auto-approve
  terraform-import-state:
    description: "Imports the state of the terraform configuration"
    parameters:
      environment:
        type: string
    steps:
      - *attach_workspace
      - checkout
      - run:
          command: |
            cd ./<<parameters.environment>>/
            terraform get -update=true
            terraform init
          name: get and init
      - run:
          name: import
          command: |
            cd ./<<parameters.environment>>/
            terraform state import -auto-approve

jobs:
  # Auth:
  assume-role-development:
    executor: docker-python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_DEVELOPMENT
  assume-role-staging:
    executor: docker-python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_STAGING
  assume-role-production:
    executor: docker-python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_PRODUCTION
  # Infrastructure changes preview:
  preview-terraform-development-changes:
    executor: docker-terraform
    steps:
      - terraform-init-then-plan:
          environment: "development"
  preview-terraform-staging-changes:
    executor: docker-terraform
    steps:
      - terraform-init-then-plan:
          environment: "staging"
  preview-terraform-production-changes:
    executor: docker-terraform
    steps:
      - terraform-init-then-plan:
          environment: "production"
  # Infrastructure deployment:
  terraform-init-and-apply-to-development:
    executor: docker-terraform
    steps:
      - terraform-init-then-apply:
          environment: "development"
  terraform-init-and-apply-to-staging:
    executor: docker-terraform
    steps:
      - terraform-init-then-apply:
          environment: "staging"
  terraform-init-and-apply-to-production:
    executor: docker-terraform
    steps:
      - terraform-init-then-plan:
          environment: "production"
  # Terraform state import:
  terraform-import-state-development:
    executor: docker-terraform
    steps:
      - terraform-import-state:
          environment: "development"
  terraform-import-state-staging:
    executor: docker-terraform
    steps:
      - terraform-import-state:
          environment: "staging"
  terraform-import-state-production:
    executor: docker-terraform
    steps:
      - terraform-import-state:
          environment: "production"

workflows:
  import-state:
    jobs:
      - terraform-import-state-development
      - terraform-import-state-staging
      - permit-import-state-production:
          type: approval
          requires:
            - terraform-import-state-staging
      - terraform-import-state-production


  preview-staging-and-prod-from-feature-branch:
    jobs:
      - assume-role-staging:
          context: api-assume-role-housing-staging-context
          filters:
             branches:
               ignore: main
      - preview-terraform-staging-changes:
          requires:
            - assume-role-staging
          filters:
            branches:
              ignore: main
      - assume-role-production:
          context: api-assume-role-housing-production-context
          filters:
             branches:
               ignore: main
      - preview-terraform-production-changes:
          requires:
            - assume-role-production
          filters:
            branches:
              ignore: main
  terraform-apply-development:
    jobs:
      - assume-role-development:
          context: api-assume-role-housing-development-context
      - preview-terraform-development-changes:
          requires:
              - assume-role-development
      - permit-development-terraform-release:
          type: approval
          requires:
            - preview-terraform-development-changes
      - terraform-init-and-apply-to-development:
          requires:
            - permit-development-terraform-release
  terraform-apply-staging-and-production:
    jobs:
      - assume-role-staging:
          context: api-assume-role-housing-staging-context
          # filters:
          #    branches:
          #      only: main
      - preview-terraform-staging-changes:
          requires:
            - assume-role-staging
          # filters:
          #   branches:
          #     only: main
      - permit-staging-terraform-release:
          type: approval
          requires:
            - preview-terraform-staging-changes
          # filters:
          #   branches:
          #     only: main
      - terraform-init-and-apply-to-staging:
          requires:
            - permit-staging-terraform-release
          # filters:
          #   branches:
          #     only: main
      - start-production-release:
          # This approval is needed to make assume role prod trigger
          # when we actually need it, otherwise the temp creds will expire
          type: approval
          requires:
            - terraform-init-and-apply-to-staging
          # filters:
          #   branches:
          #     only: main
      - assume-role-production:
          context: api-assume-role-housing-production-context
          requires:
              - start-production-release
          # filters:
          #    branches:
          #      only: main
      - preview-terraform-production-changes:
          requires:
            - assume-role-production
          # filters:
          #   branches:
          #     only: main
      - permit-production-terraform-release:
          type: approval
          requires:
            - preview-terraform-production-changes
          # filters:
          #   branches:
          #     only: main
      - terraform-init-and-apply-to-production:
          requires:
            - permit-production-terraform-release
          # filters:
          #   branches:
          #     only: main
